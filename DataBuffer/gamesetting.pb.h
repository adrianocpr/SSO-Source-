// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamesetting.proto

#ifndef PROTOBUF_gamesetting_2eproto__INCLUDED
#define PROTOBUF_gamesetting_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gamecfg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gamesetting_2eproto();
void protobuf_AssignDesc_gamesetting_2eproto();
void protobuf_ShutdownFile_gamesetting_2eproto();

class GameSetting;
class GameSetting_ChatChannelSetting;
class GameSetting_PkRule;

// ===================================================================

class GameSetting_ChatChannelSetting : public ::google::protobuf::Message {
 public:
  GameSetting_ChatChannelSetting();
  virtual ~GameSetting_ChatChannelSetting();

  GameSetting_ChatChannelSetting(const GameSetting_ChatChannelSetting& from);

  inline GameSetting_ChatChannelSetting& operator=(const GameSetting_ChatChannelSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSetting_ChatChannelSetting& default_instance();

  void Swap(GameSetting_ChatChannelSetting* other);

  // implements Message ----------------------------------------------

  GameSetting_ChatChannelSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSetting_ChatChannelSetting& from);
  void MergeFrom(const GameSetting_ChatChannelSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 chatChannelShowMask = 1 [default = 0];
  inline bool has_chatchannelshowmask() const;
  inline void clear_chatchannelshowmask();
  static const int kChatChannelShowMaskFieldNumber = 1;
  inline ::google::protobuf::uint64 chatchannelshowmask() const;
  inline void set_chatchannelshowmask(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gamecfg.GameSetting.ChatChannelSetting)
 private:
  inline void set_has_chatchannelshowmask();
  inline void clear_has_chatchannelshowmask();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 chatchannelshowmask_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gamesetting_2eproto();
  friend void protobuf_AssignDesc_gamesetting_2eproto();
  friend void protobuf_ShutdownFile_gamesetting_2eproto();

  void InitAsDefaultInstance();
  static GameSetting_ChatChannelSetting* default_instance_;
};
// -------------------------------------------------------------------

class GameSetting_PkRule : public ::google::protobuf::Message {
 public:
  GameSetting_PkRule();
  virtual ~GameSetting_PkRule();

  GameSetting_PkRule(const GameSetting_PkRule& from);

  inline GameSetting_PkRule& operator=(const GameSetting_PkRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSetting_PkRule& default_instance();

  void Swap(GameSetting_PkRule* other);

  // implements Message ----------------------------------------------

  GameSetting_PkRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSetting_PkRule& from);
  void MergeFrom(const GameSetting_PkRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pvpMask = 1;
  inline bool has_pvpmask() const;
  inline void clear_pvpmask();
  static const int kPvpMaskFieldNumber = 1;
  inline ::google::protobuf::uint32 pvpmask() const;
  inline void set_pvpmask(::google::protobuf::uint32 value);

  // optional uint32 tabSelRule = 2;
  inline bool has_tabselrule() const;
  inline void clear_tabselrule();
  static const int kTabSelRuleFieldNumber = 2;
  inline ::google::protobuf::uint32 tabselrule() const;
  inline void set_tabselrule(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gamecfg.GameSetting.PkRule)
 private:
  inline void set_has_pvpmask();
  inline void clear_has_pvpmask();
  inline void set_has_tabselrule();
  inline void clear_has_tabselrule();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pvpmask_;
  ::google::protobuf::uint32 tabselrule_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gamesetting_2eproto();
  friend void protobuf_AssignDesc_gamesetting_2eproto();
  friend void protobuf_ShutdownFile_gamesetting_2eproto();

  void InitAsDefaultInstance();
  static GameSetting_PkRule* default_instance_;
};
// -------------------------------------------------------------------

class GameSetting : public ::google::protobuf::Message {
 public:
  GameSetting();
  virtual ~GameSetting();

  GameSetting(const GameSetting& from);

  inline GameSetting& operator=(const GameSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSetting& default_instance();

  void Swap(GameSetting* other);

  // implements Message ----------------------------------------------

  GameSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSetting& from);
  void MergeFrom(const GameSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GameSetting_ChatChannelSetting ChatChannelSetting;
  typedef GameSetting_PkRule PkRule;

  // accessors -------------------------------------------------------

  // repeated .gamecfg.GameSetting.ChatChannelSetting chatSetting = 1;
  inline int chatsetting_size() const;
  inline void clear_chatsetting();
  static const int kChatSettingFieldNumber = 1;
  inline const ::gamecfg::GameSetting_ChatChannelSetting& chatsetting(int index) const;
  inline ::gamecfg::GameSetting_ChatChannelSetting* mutable_chatsetting(int index);
  inline ::gamecfg::GameSetting_ChatChannelSetting* add_chatsetting();
  inline const ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_ChatChannelSetting >&
      chatsetting() const;
  inline ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_ChatChannelSetting >*
      mutable_chatsetting();

  // optional uint32 fontSize = 2 [default = 1];
  inline bool has_fontsize() const;
  inline void clear_fontsize();
  static const int kFontSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 fontsize() const;
  inline void set_fontsize(::google::protobuf::uint32 value);

  // optional bool autoReply = 3 [default = false];
  inline bool has_autoreply() const;
  inline void clear_autoreply();
  static const int kAutoReplyFieldNumber = 3;
  inline bool autoreply() const;
  inline void set_autoreply(bool value);

  // optional string autoReplyTxt = 4;
  inline bool has_autoreplytxt() const;
  inline void clear_autoreplytxt();
  static const int kAutoReplyTxtFieldNumber = 4;
  inline const ::std::string& autoreplytxt() const;
  inline void set_autoreplytxt(const ::std::string& value);
  inline void set_autoreplytxt(const char* value);
  inline void set_autoreplytxt(const char* value, size_t size);
  inline ::std::string* mutable_autoreplytxt();
  inline ::std::string* release_autoreplytxt();
  inline void set_allocated_autoreplytxt(::std::string* autoreplytxt);

  // repeated .gamecfg.GameSetting.PkRule pkRules = 5;
  inline int pkrules_size() const;
  inline void clear_pkrules();
  static const int kPkRulesFieldNumber = 5;
  inline const ::gamecfg::GameSetting_PkRule& pkrules(int index) const;
  inline ::gamecfg::GameSetting_PkRule* mutable_pkrules(int index);
  inline ::gamecfg::GameSetting_PkRule* add_pkrules();
  inline const ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_PkRule >&
      pkrules() const;
  inline ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_PkRule >*
      mutable_pkrules();

  // optional int32 curPkRule = 6 [default = 0];
  inline bool has_curpkrule() const;
  inline void clear_curpkrule();
  static const int kCurPkRuleFieldNumber = 6;
  inline ::google::protobuf::int32 curpkrule() const;
  inline void set_curpkrule(::google::protobuf::int32 value);

  // optional bool turnAround = 7 [default = false];
  inline bool has_turnaround() const;
  inline void clear_turnaround();
  static const int kTurnAroundFieldNumber = 7;
  inline bool turnaround() const;
  inline void set_turnaround(bool value);

  // optional bool reverseWheel = 8 [default = false];
  inline bool has_reversewheel() const;
  inline void clear_reversewheel();
  static const int kReverseWheelFieldNumber = 8;
  inline bool reversewheel() const;
  inline void set_reversewheel(bool value);

  // optional bool chatBubble = 9 [default = true];
  inline bool has_chatbubble() const;
  inline void clear_chatbubble();
  static const int kChatBubbleFieldNumber = 9;
  inline bool chatbubble() const;
  inline void set_chatbubble(bool value);

  // optional uint32 extraInputMode = 10 [default = 0];
  inline bool has_extrainputmode() const;
  inline void clear_extrainputmode();
  static const int kExtraInputModeFieldNumber = 10;
  inline ::google::protobuf::uint32 extrainputmode() const;
  inline void set_extrainputmode(::google::protobuf::uint32 value);

  // optional bool chatAutoUseBindMoney = 11 [default = true];
  inline bool has_chatautousebindmoney() const;
  inline void clear_chatautousebindmoney();
  static const int kChatAutoUseBindMoneyFieldNumber = 11;
  inline bool chatautousebindmoney() const;
  inline void set_chatautousebindmoney(bool value);

  // optional bool chatAutoWorldItem = 12 [default = false];
  inline bool has_chatautoworlditem() const;
  inline void clear_chatautoworlditem();
  static const int kChatAutoWorldItemFieldNumber = 12;
  inline bool chatautoworlditem() const;
  inline void set_chatautoworlditem(bool value);

  // optional int32 bagItemFilterIndex = 13 [default = 0];
  inline bool has_bagitemfilterindex() const;
  inline void clear_bagitemfilterindex();
  static const int kBagItemFilterIndexFieldNumber = 13;
  inline ::google::protobuf::int32 bagitemfilterindex() const;
  inline void set_bagitemfilterindex(::google::protobuf::int32 value);

  // repeated int32 activitiesSend = 14 [packed = true];
  inline int activitiessend_size() const;
  inline void clear_activitiessend();
  static const int kActivitiesSendFieldNumber = 14;
  inline ::google::protobuf::int32 activitiessend(int index) const;
  inline void set_activitiessend(int index, ::google::protobuf::int32 value);
  inline void add_activitiessend(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      activitiessend() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_activitiessend();

  // repeated int32 activitiesReceive = 15 [packed = true];
  inline int activitiesreceive_size() const;
  inline void clear_activitiesreceive();
  static const int kActivitiesReceiveFieldNumber = 15;
  inline ::google::protobuf::int32 activitiesreceive(int index) const;
  inline void set_activitiesreceive(int index, ::google::protobuf::int32 value);
  inline void add_activitiesreceive(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      activitiesreceive() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_activitiesreceive();

  // optional uint32 userSettingChanged = 16 [default = 0];
  inline bool has_usersettingchanged() const;
  inline void clear_usersettingchanged();
  static const int kUserSettingChangedFieldNumber = 16;
  inline ::google::protobuf::uint32 usersettingchanged() const;
  inline void set_usersettingchanged(::google::protobuf::uint32 value);

  // optional uint32 currPetIndex = 17 [default = 0];
  inline bool has_currpetindex() const;
  inline void clear_currpetindex();
  static const int kCurrPetIndexFieldNumber = 17;
  inline ::google::protobuf::uint32 currpetindex() const;
  inline void set_currpetindex(::google::protobuf::uint32 value);

  // optional bool contestLevelIcon = 18 [default = false];
  inline bool has_contestlevelicon() const;
  inline void clear_contestlevelicon();
  static const int kContestLevelIconFieldNumber = 18;
  inline bool contestlevelicon() const;
  inline void set_contestlevelicon(bool value);

  // @@protoc_insertion_point(class_scope:gamecfg.GameSetting)
 private:
  inline void set_has_fontsize();
  inline void clear_has_fontsize();
  inline void set_has_autoreply();
  inline void clear_has_autoreply();
  inline void set_has_autoreplytxt();
  inline void clear_has_autoreplytxt();
  inline void set_has_curpkrule();
  inline void clear_has_curpkrule();
  inline void set_has_turnaround();
  inline void clear_has_turnaround();
  inline void set_has_reversewheel();
  inline void clear_has_reversewheel();
  inline void set_has_chatbubble();
  inline void clear_has_chatbubble();
  inline void set_has_extrainputmode();
  inline void clear_has_extrainputmode();
  inline void set_has_chatautousebindmoney();
  inline void clear_has_chatautousebindmoney();
  inline void set_has_chatautoworlditem();
  inline void clear_has_chatautoworlditem();
  inline void set_has_bagitemfilterindex();
  inline void clear_has_bagitemfilterindex();
  inline void set_has_usersettingchanged();
  inline void clear_has_usersettingchanged();
  inline void set_has_currpetindex();
  inline void clear_has_currpetindex();
  inline void set_has_contestlevelicon();
  inline void clear_has_contestlevelicon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_ChatChannelSetting > chatsetting_;
  ::std::string* autoreplytxt_;
  ::google::protobuf::uint32 fontsize_;
  ::google::protobuf::int32 curpkrule_;
  ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_PkRule > pkrules_;
  bool autoreply_;
  bool turnaround_;
  bool reversewheel_;
  bool chatbubble_;
  ::google::protobuf::uint32 extrainputmode_;
  ::google::protobuf::int32 bagitemfilterindex_;
  bool chatautousebindmoney_;
  bool chatautoworlditem_;
  bool contestlevelicon_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > activitiessend_;
  mutable int _activitiessend_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > activitiesreceive_;
  mutable int _activitiesreceive_cached_byte_size_;
  ::google::protobuf::uint32 usersettingchanged_;
  ::google::protobuf::uint32 currpetindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_gamesetting_2eproto();
  friend void protobuf_AssignDesc_gamesetting_2eproto();
  friend void protobuf_ShutdownFile_gamesetting_2eproto();

  void InitAsDefaultInstance();
  static GameSetting* default_instance_;
};
// ===================================================================


// ===================================================================

// GameSetting_ChatChannelSetting

// optional uint64 chatChannelShowMask = 1 [default = 0];
inline bool GameSetting_ChatChannelSetting::has_chatchannelshowmask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSetting_ChatChannelSetting::set_has_chatchannelshowmask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSetting_ChatChannelSetting::clear_has_chatchannelshowmask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSetting_ChatChannelSetting::clear_chatchannelshowmask() {
  chatchannelshowmask_ = GOOGLE_ULONGLONG(0);
  clear_has_chatchannelshowmask();
}
inline ::google::protobuf::uint64 GameSetting_ChatChannelSetting::chatchannelshowmask() const {
  return chatchannelshowmask_;
}
inline void GameSetting_ChatChannelSetting::set_chatchannelshowmask(::google::protobuf::uint64 value) {
  set_has_chatchannelshowmask();
  chatchannelshowmask_ = value;
}

// optional string name = 2;
inline bool GameSetting_ChatChannelSetting::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameSetting_ChatChannelSetting::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameSetting_ChatChannelSetting::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameSetting_ChatChannelSetting::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GameSetting_ChatChannelSetting::name() const {
  return *name_;
}
inline void GameSetting_ChatChannelSetting::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameSetting_ChatChannelSetting::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameSetting_ChatChannelSetting::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameSetting_ChatChannelSetting::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GameSetting_ChatChannelSetting::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameSetting_ChatChannelSetting::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GameSetting_PkRule

// optional uint32 pvpMask = 1;
inline bool GameSetting_PkRule::has_pvpmask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSetting_PkRule::set_has_pvpmask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSetting_PkRule::clear_has_pvpmask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSetting_PkRule::clear_pvpmask() {
  pvpmask_ = 0u;
  clear_has_pvpmask();
}
inline ::google::protobuf::uint32 GameSetting_PkRule::pvpmask() const {
  return pvpmask_;
}
inline void GameSetting_PkRule::set_pvpmask(::google::protobuf::uint32 value) {
  set_has_pvpmask();
  pvpmask_ = value;
}

// optional uint32 tabSelRule = 2;
inline bool GameSetting_PkRule::has_tabselrule() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameSetting_PkRule::set_has_tabselrule() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameSetting_PkRule::clear_has_tabselrule() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameSetting_PkRule::clear_tabselrule() {
  tabselrule_ = 0u;
  clear_has_tabselrule();
}
inline ::google::protobuf::uint32 GameSetting_PkRule::tabselrule() const {
  return tabselrule_;
}
inline void GameSetting_PkRule::set_tabselrule(::google::protobuf::uint32 value) {
  set_has_tabselrule();
  tabselrule_ = value;
}

// -------------------------------------------------------------------

// GameSetting

// repeated .gamecfg.GameSetting.ChatChannelSetting chatSetting = 1;
inline int GameSetting::chatsetting_size() const {
  return chatsetting_.size();
}
inline void GameSetting::clear_chatsetting() {
  chatsetting_.Clear();
}
inline const ::gamecfg::GameSetting_ChatChannelSetting& GameSetting::chatsetting(int index) const {
  return chatsetting_.Get(index);
}
inline ::gamecfg::GameSetting_ChatChannelSetting* GameSetting::mutable_chatsetting(int index) {
  return chatsetting_.Mutable(index);
}
inline ::gamecfg::GameSetting_ChatChannelSetting* GameSetting::add_chatsetting() {
  return chatsetting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_ChatChannelSetting >&
GameSetting::chatsetting() const {
  return chatsetting_;
}
inline ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_ChatChannelSetting >*
GameSetting::mutable_chatsetting() {
  return &chatsetting_;
}

// optional uint32 fontSize = 2 [default = 1];
inline bool GameSetting::has_fontsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameSetting::set_has_fontsize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameSetting::clear_has_fontsize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameSetting::clear_fontsize() {
  fontsize_ = 1u;
  clear_has_fontsize();
}
inline ::google::protobuf::uint32 GameSetting::fontsize() const {
  return fontsize_;
}
inline void GameSetting::set_fontsize(::google::protobuf::uint32 value) {
  set_has_fontsize();
  fontsize_ = value;
}

// optional bool autoReply = 3 [default = false];
inline bool GameSetting::has_autoreply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameSetting::set_has_autoreply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameSetting::clear_has_autoreply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameSetting::clear_autoreply() {
  autoreply_ = false;
  clear_has_autoreply();
}
inline bool GameSetting::autoreply() const {
  return autoreply_;
}
inline void GameSetting::set_autoreply(bool value) {
  set_has_autoreply();
  autoreply_ = value;
}

// optional string autoReplyTxt = 4;
inline bool GameSetting::has_autoreplytxt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameSetting::set_has_autoreplytxt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameSetting::clear_has_autoreplytxt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameSetting::clear_autoreplytxt() {
  if (autoreplytxt_ != &::google::protobuf::internal::kEmptyString) {
    autoreplytxt_->clear();
  }
  clear_has_autoreplytxt();
}
inline const ::std::string& GameSetting::autoreplytxt() const {
  return *autoreplytxt_;
}
inline void GameSetting::set_autoreplytxt(const ::std::string& value) {
  set_has_autoreplytxt();
  if (autoreplytxt_ == &::google::protobuf::internal::kEmptyString) {
    autoreplytxt_ = new ::std::string;
  }
  autoreplytxt_->assign(value);
}
inline void GameSetting::set_autoreplytxt(const char* value) {
  set_has_autoreplytxt();
  if (autoreplytxt_ == &::google::protobuf::internal::kEmptyString) {
    autoreplytxt_ = new ::std::string;
  }
  autoreplytxt_->assign(value);
}
inline void GameSetting::set_autoreplytxt(const char* value, size_t size) {
  set_has_autoreplytxt();
  if (autoreplytxt_ == &::google::protobuf::internal::kEmptyString) {
    autoreplytxt_ = new ::std::string;
  }
  autoreplytxt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameSetting::mutable_autoreplytxt() {
  set_has_autoreplytxt();
  if (autoreplytxt_ == &::google::protobuf::internal::kEmptyString) {
    autoreplytxt_ = new ::std::string;
  }
  return autoreplytxt_;
}
inline ::std::string* GameSetting::release_autoreplytxt() {
  clear_has_autoreplytxt();
  if (autoreplytxt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = autoreplytxt_;
    autoreplytxt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameSetting::set_allocated_autoreplytxt(::std::string* autoreplytxt) {
  if (autoreplytxt_ != &::google::protobuf::internal::kEmptyString) {
    delete autoreplytxt_;
  }
  if (autoreplytxt) {
    set_has_autoreplytxt();
    autoreplytxt_ = autoreplytxt;
  } else {
    clear_has_autoreplytxt();
    autoreplytxt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .gamecfg.GameSetting.PkRule pkRules = 5;
inline int GameSetting::pkrules_size() const {
  return pkrules_.size();
}
inline void GameSetting::clear_pkrules() {
  pkrules_.Clear();
}
inline const ::gamecfg::GameSetting_PkRule& GameSetting::pkrules(int index) const {
  return pkrules_.Get(index);
}
inline ::gamecfg::GameSetting_PkRule* GameSetting::mutable_pkrules(int index) {
  return pkrules_.Mutable(index);
}
inline ::gamecfg::GameSetting_PkRule* GameSetting::add_pkrules() {
  return pkrules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_PkRule >&
GameSetting::pkrules() const {
  return pkrules_;
}
inline ::google::protobuf::RepeatedPtrField< ::gamecfg::GameSetting_PkRule >*
GameSetting::mutable_pkrules() {
  return &pkrules_;
}

// optional int32 curPkRule = 6 [default = 0];
inline bool GameSetting::has_curpkrule() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameSetting::set_has_curpkrule() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameSetting::clear_has_curpkrule() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameSetting::clear_curpkrule() {
  curpkrule_ = 0;
  clear_has_curpkrule();
}
inline ::google::protobuf::int32 GameSetting::curpkrule() const {
  return curpkrule_;
}
inline void GameSetting::set_curpkrule(::google::protobuf::int32 value) {
  set_has_curpkrule();
  curpkrule_ = value;
}

// optional bool turnAround = 7 [default = false];
inline bool GameSetting::has_turnaround() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameSetting::set_has_turnaround() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameSetting::clear_has_turnaround() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameSetting::clear_turnaround() {
  turnaround_ = false;
  clear_has_turnaround();
}
inline bool GameSetting::turnaround() const {
  return turnaround_;
}
inline void GameSetting::set_turnaround(bool value) {
  set_has_turnaround();
  turnaround_ = value;
}

// optional bool reverseWheel = 8 [default = false];
inline bool GameSetting::has_reversewheel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameSetting::set_has_reversewheel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameSetting::clear_has_reversewheel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameSetting::clear_reversewheel() {
  reversewheel_ = false;
  clear_has_reversewheel();
}
inline bool GameSetting::reversewheel() const {
  return reversewheel_;
}
inline void GameSetting::set_reversewheel(bool value) {
  set_has_reversewheel();
  reversewheel_ = value;
}

// optional bool chatBubble = 9 [default = true];
inline bool GameSetting::has_chatbubble() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameSetting::set_has_chatbubble() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameSetting::clear_has_chatbubble() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameSetting::clear_chatbubble() {
  chatbubble_ = true;
  clear_has_chatbubble();
}
inline bool GameSetting::chatbubble() const {
  return chatbubble_;
}
inline void GameSetting::set_chatbubble(bool value) {
  set_has_chatbubble();
  chatbubble_ = value;
}

// optional uint32 extraInputMode = 10 [default = 0];
inline bool GameSetting::has_extrainputmode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameSetting::set_has_extrainputmode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameSetting::clear_has_extrainputmode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameSetting::clear_extrainputmode() {
  extrainputmode_ = 0u;
  clear_has_extrainputmode();
}
inline ::google::protobuf::uint32 GameSetting::extrainputmode() const {
  return extrainputmode_;
}
inline void GameSetting::set_extrainputmode(::google::protobuf::uint32 value) {
  set_has_extrainputmode();
  extrainputmode_ = value;
}

// optional bool chatAutoUseBindMoney = 11 [default = true];
inline bool GameSetting::has_chatautousebindmoney() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameSetting::set_has_chatautousebindmoney() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameSetting::clear_has_chatautousebindmoney() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameSetting::clear_chatautousebindmoney() {
  chatautousebindmoney_ = true;
  clear_has_chatautousebindmoney();
}
inline bool GameSetting::chatautousebindmoney() const {
  return chatautousebindmoney_;
}
inline void GameSetting::set_chatautousebindmoney(bool value) {
  set_has_chatautousebindmoney();
  chatautousebindmoney_ = value;
}

// optional bool chatAutoWorldItem = 12 [default = false];
inline bool GameSetting::has_chatautoworlditem() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameSetting::set_has_chatautoworlditem() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameSetting::clear_has_chatautoworlditem() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameSetting::clear_chatautoworlditem() {
  chatautoworlditem_ = false;
  clear_has_chatautoworlditem();
}
inline bool GameSetting::chatautoworlditem() const {
  return chatautoworlditem_;
}
inline void GameSetting::set_chatautoworlditem(bool value) {
  set_has_chatautoworlditem();
  chatautoworlditem_ = value;
}

// optional int32 bagItemFilterIndex = 13 [default = 0];
inline bool GameSetting::has_bagitemfilterindex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GameSetting::set_has_bagitemfilterindex() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GameSetting::clear_has_bagitemfilterindex() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GameSetting::clear_bagitemfilterindex() {
  bagitemfilterindex_ = 0;
  clear_has_bagitemfilterindex();
}
inline ::google::protobuf::int32 GameSetting::bagitemfilterindex() const {
  return bagitemfilterindex_;
}
inline void GameSetting::set_bagitemfilterindex(::google::protobuf::int32 value) {
  set_has_bagitemfilterindex();
  bagitemfilterindex_ = value;
}

// repeated int32 activitiesSend = 14 [packed = true];
inline int GameSetting::activitiessend_size() const {
  return activitiessend_.size();
}
inline void GameSetting::clear_activitiessend() {
  activitiessend_.Clear();
}
inline ::google::protobuf::int32 GameSetting::activitiessend(int index) const {
  return activitiessend_.Get(index);
}
inline void GameSetting::set_activitiessend(int index, ::google::protobuf::int32 value) {
  activitiessend_.Set(index, value);
}
inline void GameSetting::add_activitiessend(::google::protobuf::int32 value) {
  activitiessend_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameSetting::activitiessend() const {
  return activitiessend_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameSetting::mutable_activitiessend() {
  return &activitiessend_;
}

// repeated int32 activitiesReceive = 15 [packed = true];
inline int GameSetting::activitiesreceive_size() const {
  return activitiesreceive_.size();
}
inline void GameSetting::clear_activitiesreceive() {
  activitiesreceive_.Clear();
}
inline ::google::protobuf::int32 GameSetting::activitiesreceive(int index) const {
  return activitiesreceive_.Get(index);
}
inline void GameSetting::set_activitiesreceive(int index, ::google::protobuf::int32 value) {
  activitiesreceive_.Set(index, value);
}
inline void GameSetting::add_activitiesreceive(::google::protobuf::int32 value) {
  activitiesreceive_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameSetting::activitiesreceive() const {
  return activitiesreceive_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameSetting::mutable_activitiesreceive() {
  return &activitiesreceive_;
}

// optional uint32 userSettingChanged = 16 [default = 0];
inline bool GameSetting::has_usersettingchanged() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GameSetting::set_has_usersettingchanged() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GameSetting::clear_has_usersettingchanged() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GameSetting::clear_usersettingchanged() {
  usersettingchanged_ = 0u;
  clear_has_usersettingchanged();
}
inline ::google::protobuf::uint32 GameSetting::usersettingchanged() const {
  return usersettingchanged_;
}
inline void GameSetting::set_usersettingchanged(::google::protobuf::uint32 value) {
  set_has_usersettingchanged();
  usersettingchanged_ = value;
}

// optional uint32 currPetIndex = 17 [default = 0];
inline bool GameSetting::has_currpetindex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GameSetting::set_has_currpetindex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GameSetting::clear_has_currpetindex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GameSetting::clear_currpetindex() {
  currpetindex_ = 0u;
  clear_has_currpetindex();
}
inline ::google::protobuf::uint32 GameSetting::currpetindex() const {
  return currpetindex_;
}
inline void GameSetting::set_currpetindex(::google::protobuf::uint32 value) {
  set_has_currpetindex();
  currpetindex_ = value;
}

// optional bool contestLevelIcon = 18 [default = false];
inline bool GameSetting::has_contestlevelicon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GameSetting::set_has_contestlevelicon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GameSetting::clear_has_contestlevelicon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GameSetting::clear_contestlevelicon() {
  contestlevelicon_ = false;
  clear_has_contestlevelicon();
}
inline bool GameSetting::contestlevelicon() const {
  return contestlevelicon_;
}
inline void GameSetting::set_contestlevelicon(bool value) {
  set_has_contestlevelicon();
  contestlevelicon_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamecfg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gamesetting_2eproto__INCLUDED
