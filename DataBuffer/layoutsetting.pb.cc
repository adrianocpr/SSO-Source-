// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layoutsetting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "layoutsetting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamecfg {

namespace {

const ::google::protobuf::Descriptor* LayoutSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayoutSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayoutSetting_SaveMark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayoutSetting_SaveMark_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_layoutsetting_2eproto() {
  protobuf_AddDesc_layoutsetting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "layoutsetting.proto");
  GOOGLE_CHECK(file != NULL);
  LayoutSetting_descriptor_ = file->message_type(0);
  static const int LayoutSetting_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, chatupperratiox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, chatupperratioy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, chatlowerratiox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, chatlowerratioy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, marks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, onlinenotify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, friendautoreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, savehistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, lockquickbar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, quickbartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, rightquickbartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, questtraceblockedids_),
  };
  LayoutSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayoutSetting_descriptor_,
      LayoutSetting::default_instance_,
      LayoutSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayoutSetting));
  LayoutSetting_SaveMark_descriptor_ = LayoutSetting_descriptor_->nested_type(0);
  static const int LayoutSetting_SaveMark_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting_SaveMark, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting_SaveMark, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting_SaveMark, pos_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting_SaveMark, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting_SaveMark, instanceid_),
  };
  LayoutSetting_SaveMark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayoutSetting_SaveMark_descriptor_,
      LayoutSetting_SaveMark::default_instance_,
      LayoutSetting_SaveMark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting_SaveMark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayoutSetting_SaveMark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayoutSetting_SaveMark));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_layoutsetting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayoutSetting_descriptor_, &LayoutSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayoutSetting_SaveMark_descriptor_, &LayoutSetting_SaveMark::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_layoutsetting_2eproto() {
  delete LayoutSetting::default_instance_;
  delete LayoutSetting_reflection_;
  delete LayoutSetting_SaveMark::default_instance_;
  delete LayoutSetting_SaveMark_reflection_;
}

void protobuf_AddDesc_layoutsetting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023layoutsetting.proto\022\007gamecfg\"\314\003\n\rLayou"
    "tSetting\022\027\n\017chatUpperRatioX\030\001 \001(\002\022\027\n\017cha"
    "tUpperRatioY\030\002 \001(\002\022\027\n\017chatLowerRatioX\030\003 "
    "\001(\002\022\027\n\017chatLowerRatioY\030\004 \001(\002\022.\n\005marks\030\005 "
    "\003(\0132\037.gamecfg.LayoutSetting.SaveMark\022\033\n\014"
    "onlineNotify\030\006 \001(\010:\005false\022\036\n\017friendAutoR"
    "eply\030\007 \001(\010:\005false\022\031\n\013saveHistory\030\010 \001(\010:\004"
    "true\022\033\n\014lockQuickBar\030\t \001(\010:\005false\022\027\n\014qui"
    "ckBarType\030\n \001(\005:\0010\022\034\n\021rightQuickBarType\030"
    "\013 \001(\005:\0010\022 \n\024questTraceBlockedIds\030\014 \003(\005B\002"
    "\020\001\032Y\n\010SaveMark\022\r\n\005pos_x\030\001 \001(\002\022\r\n\005pos_y\030\002"
    " \001(\002\022\r\n\005pos_z\030\003 \001(\002\022\014\n\004name\030\004 \001(\t\022\022\n\nins"
    "tanceId\030\005 \001(\005", 493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "layoutsetting.proto", &protobuf_RegisterTypes);
  LayoutSetting::default_instance_ = new LayoutSetting();
  LayoutSetting_SaveMark::default_instance_ = new LayoutSetting_SaveMark();
  LayoutSetting::default_instance_->InitAsDefaultInstance();
  LayoutSetting_SaveMark::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_layoutsetting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_layoutsetting_2eproto {
  StaticDescriptorInitializer_layoutsetting_2eproto() {
    protobuf_AddDesc_layoutsetting_2eproto();
  }
} static_descriptor_initializer_layoutsetting_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LayoutSetting_SaveMark::kPosXFieldNumber;
const int LayoutSetting_SaveMark::kPosYFieldNumber;
const int LayoutSetting_SaveMark::kPosZFieldNumber;
const int LayoutSetting_SaveMark::kNameFieldNumber;
const int LayoutSetting_SaveMark::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

LayoutSetting_SaveMark::LayoutSetting_SaveMark()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayoutSetting_SaveMark::InitAsDefaultInstance() {
}

LayoutSetting_SaveMark::LayoutSetting_SaveMark(const LayoutSetting_SaveMark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayoutSetting_SaveMark::SharedCtor() {
  _cached_size_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayoutSetting_SaveMark::~LayoutSetting_SaveMark() {
  SharedDtor();
}

void LayoutSetting_SaveMark::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LayoutSetting_SaveMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayoutSetting_SaveMark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayoutSetting_SaveMark_descriptor_;
}

const LayoutSetting_SaveMark& LayoutSetting_SaveMark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layoutsetting_2eproto();
  return *default_instance_;
}

LayoutSetting_SaveMark* LayoutSetting_SaveMark::default_instance_ = NULL;

LayoutSetting_SaveMark* LayoutSetting_SaveMark::New() const {
  return new LayoutSetting_SaveMark;
}

void LayoutSetting_SaveMark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_x_ = 0;
    pos_y_ = 0;
    pos_z_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    instanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayoutSetting_SaveMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pos_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pos_y;
        break;
      }

      // optional float pos_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pos_z;
        break;
      }

      // optional float pos_z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          set_has_pos_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_instanceId;
        break;
      }

      // optional int32 instanceId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayoutSetting_SaveMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float pos_x = 1;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pos_x(), output);
  }

  // optional float pos_y = 2;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_y(), output);
  }

  // optional float pos_z = 3;
  if (has_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_z(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 instanceId = 5;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayoutSetting_SaveMark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float pos_x = 1;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pos_x(), target);
  }

  // optional float pos_y = 2;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_y(), target);
  }

  // optional float pos_z = 3;
  if (has_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_z(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 instanceId = 5;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayoutSetting_SaveMark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float pos_x = 1;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 2;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 3;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 instanceId = 5;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayoutSetting_SaveMark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayoutSetting_SaveMark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayoutSetting_SaveMark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayoutSetting_SaveMark::MergeFrom(const LayoutSetting_SaveMark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_pos_z()) {
      set_pos_z(from.pos_z());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayoutSetting_SaveMark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutSetting_SaveMark::CopyFrom(const LayoutSetting_SaveMark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutSetting_SaveMark::IsInitialized() const {

  return true;
}

void LayoutSetting_SaveMark::Swap(LayoutSetting_SaveMark* other) {
  if (other != this) {
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(pos_z_, other->pos_z_);
    std::swap(name_, other->name_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayoutSetting_SaveMark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayoutSetting_SaveMark_descriptor_;
  metadata.reflection = LayoutSetting_SaveMark_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LayoutSetting::kChatUpperRatioXFieldNumber;
const int LayoutSetting::kChatUpperRatioYFieldNumber;
const int LayoutSetting::kChatLowerRatioXFieldNumber;
const int LayoutSetting::kChatLowerRatioYFieldNumber;
const int LayoutSetting::kMarksFieldNumber;
const int LayoutSetting::kOnlineNotifyFieldNumber;
const int LayoutSetting::kFriendAutoReplyFieldNumber;
const int LayoutSetting::kSaveHistoryFieldNumber;
const int LayoutSetting::kLockQuickBarFieldNumber;
const int LayoutSetting::kQuickBarTypeFieldNumber;
const int LayoutSetting::kRightQuickBarTypeFieldNumber;
const int LayoutSetting::kQuestTraceBlockedIdsFieldNumber;
#endif  // !_MSC_VER

LayoutSetting::LayoutSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LayoutSetting::InitAsDefaultInstance() {
}

LayoutSetting::LayoutSetting(const LayoutSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LayoutSetting::SharedCtor() {
  _cached_size_ = 0;
  chatupperratiox_ = 0;
  chatupperratioy_ = 0;
  chatlowerratiox_ = 0;
  chatlowerratioy_ = 0;
  onlinenotify_ = false;
  friendautoreply_ = false;
  savehistory_ = true;
  lockquickbar_ = false;
  quickbartype_ = 0;
  rightquickbartype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayoutSetting::~LayoutSetting() {
  SharedDtor();
}

void LayoutSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LayoutSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayoutSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayoutSetting_descriptor_;
}

const LayoutSetting& LayoutSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_layoutsetting_2eproto();
  return *default_instance_;
}

LayoutSetting* LayoutSetting::default_instance_ = NULL;

LayoutSetting* LayoutSetting::New() const {
  return new LayoutSetting;
}

void LayoutSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatupperratiox_ = 0;
    chatupperratioy_ = 0;
    chatlowerratiox_ = 0;
    chatlowerratioy_ = 0;
    onlinenotify_ = false;
    friendautoreply_ = false;
    savehistory_ = true;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lockquickbar_ = false;
    quickbartype_ = 0;
    rightquickbartype_ = 0;
  }
  marks_.Clear();
  questtraceblockedids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayoutSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float chatUpperRatioX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chatupperratiox_)));
          set_has_chatupperratiox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_chatUpperRatioY;
        break;
      }

      // optional float chatUpperRatioY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chatUpperRatioY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chatupperratioy_)));
          set_has_chatupperratioy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_chatLowerRatioX;
        break;
      }

      // optional float chatLowerRatioX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chatLowerRatioX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chatlowerratiox_)));
          set_has_chatlowerratiox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_chatLowerRatioY;
        break;
      }

      // optional float chatLowerRatioY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_chatLowerRatioY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &chatlowerratioy_)));
          set_has_chatlowerratioy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_marks;
        break;
      }

      // repeated .gamecfg.LayoutSetting.SaveMark marks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_marks;
        if (input->ExpectTag(48)) goto parse_onlineNotify;
        break;
      }

      // optional bool onlineNotify = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineNotify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onlinenotify_)));
          set_has_onlinenotify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_friendAutoReply;
        break;
      }

      // optional bool friendAutoReply = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendAutoReply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friendautoreply_)));
          set_has_friendautoreply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_saveHistory;
        break;
      }

      // optional bool saveHistory = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveHistory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &savehistory_)));
          set_has_savehistory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lockQuickBar;
        break;
      }

      // optional bool lockQuickBar = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockQuickBar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lockquickbar_)));
          set_has_lockquickbar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_quickBarType;
        break;
      }

      // optional int32 quickBarType = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quickBarType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quickbartype_)));
          set_has_quickbartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rightQuickBarType;
        break;
      }

      // optional int32 rightQuickBarType = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightQuickBarType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightquickbartype_)));
          set_has_rightquickbartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_questTraceBlockedIds;
        break;
      }

      // repeated int32 questTraceBlockedIds = 12 [packed = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questTraceBlockedIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_questtraceblockedids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 98, input, this->mutable_questtraceblockedids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayoutSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float chatUpperRatioX = 1;
  if (has_chatupperratiox()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->chatupperratiox(), output);
  }

  // optional float chatUpperRatioY = 2;
  if (has_chatupperratioy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->chatupperratioy(), output);
  }

  // optional float chatLowerRatioX = 3;
  if (has_chatlowerratiox()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->chatlowerratiox(), output);
  }

  // optional float chatLowerRatioY = 4;
  if (has_chatlowerratioy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->chatlowerratioy(), output);
  }

  // repeated .gamecfg.LayoutSetting.SaveMark marks = 5;
  for (int i = 0; i < this->marks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->marks(i), output);
  }

  // optional bool onlineNotify = 6 [default = false];
  if (has_onlinenotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->onlinenotify(), output);
  }

  // optional bool friendAutoReply = 7 [default = false];
  if (has_friendautoreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->friendautoreply(), output);
  }

  // optional bool saveHistory = 8 [default = true];
  if (has_savehistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->savehistory(), output);
  }

  // optional bool lockQuickBar = 9 [default = false];
  if (has_lockquickbar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->lockquickbar(), output);
  }

  // optional int32 quickBarType = 10 [default = 0];
  if (has_quickbartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quickbartype(), output);
  }

  // optional int32 rightQuickBarType = 11 [default = 0];
  if (has_rightquickbartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rightquickbartype(), output);
  }

  // repeated int32 questTraceBlockedIds = 12 [packed = true];
  if (this->questtraceblockedids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_questtraceblockedids_cached_byte_size_);
  }
  for (int i = 0; i < this->questtraceblockedids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->questtraceblockedids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LayoutSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float chatUpperRatioX = 1;
  if (has_chatupperratiox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->chatupperratiox(), target);
  }

  // optional float chatUpperRatioY = 2;
  if (has_chatupperratioy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->chatupperratioy(), target);
  }

  // optional float chatLowerRatioX = 3;
  if (has_chatlowerratiox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->chatlowerratiox(), target);
  }

  // optional float chatLowerRatioY = 4;
  if (has_chatlowerratioy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->chatlowerratioy(), target);
  }

  // repeated .gamecfg.LayoutSetting.SaveMark marks = 5;
  for (int i = 0; i < this->marks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->marks(i), target);
  }

  // optional bool onlineNotify = 6 [default = false];
  if (has_onlinenotify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->onlinenotify(), target);
  }

  // optional bool friendAutoReply = 7 [default = false];
  if (has_friendautoreply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->friendautoreply(), target);
  }

  // optional bool saveHistory = 8 [default = true];
  if (has_savehistory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->savehistory(), target);
  }

  // optional bool lockQuickBar = 9 [default = false];
  if (has_lockquickbar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->lockquickbar(), target);
  }

  // optional int32 quickBarType = 10 [default = 0];
  if (has_quickbartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quickbartype(), target);
  }

  // optional int32 rightQuickBarType = 11 [default = 0];
  if (has_rightquickbartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rightquickbartype(), target);
  }

  // repeated int32 questTraceBlockedIds = 12 [packed = true];
  if (this->questtraceblockedids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _questtraceblockedids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->questtraceblockedids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->questtraceblockedids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LayoutSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float chatUpperRatioX = 1;
    if (has_chatupperratiox()) {
      total_size += 1 + 4;
    }

    // optional float chatUpperRatioY = 2;
    if (has_chatupperratioy()) {
      total_size += 1 + 4;
    }

    // optional float chatLowerRatioX = 3;
    if (has_chatlowerratiox()) {
      total_size += 1 + 4;
    }

    // optional float chatLowerRatioY = 4;
    if (has_chatlowerratioy()) {
      total_size += 1 + 4;
    }

    // optional bool onlineNotify = 6 [default = false];
    if (has_onlinenotify()) {
      total_size += 1 + 1;
    }

    // optional bool friendAutoReply = 7 [default = false];
    if (has_friendautoreply()) {
      total_size += 1 + 1;
    }

    // optional bool saveHistory = 8 [default = true];
    if (has_savehistory()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool lockQuickBar = 9 [default = false];
    if (has_lockquickbar()) {
      total_size += 1 + 1;
    }

    // optional int32 quickBarType = 10 [default = 0];
    if (has_quickbartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quickbartype());
    }

    // optional int32 rightQuickBarType = 11 [default = 0];
    if (has_rightquickbartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightquickbartype());
    }

  }
  // repeated .gamecfg.LayoutSetting.SaveMark marks = 5;
  total_size += 1 * this->marks_size();
  for (int i = 0; i < this->marks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marks(i));
  }

  // repeated int32 questTraceBlockedIds = 12 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->questtraceblockedids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->questtraceblockedids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _questtraceblockedids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayoutSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayoutSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayoutSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayoutSetting::MergeFrom(const LayoutSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  marks_.MergeFrom(from.marks_);
  questtraceblockedids_.MergeFrom(from.questtraceblockedids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatupperratiox()) {
      set_chatupperratiox(from.chatupperratiox());
    }
    if (from.has_chatupperratioy()) {
      set_chatupperratioy(from.chatupperratioy());
    }
    if (from.has_chatlowerratiox()) {
      set_chatlowerratiox(from.chatlowerratiox());
    }
    if (from.has_chatlowerratioy()) {
      set_chatlowerratioy(from.chatlowerratioy());
    }
    if (from.has_onlinenotify()) {
      set_onlinenotify(from.onlinenotify());
    }
    if (from.has_friendautoreply()) {
      set_friendautoreply(from.friendautoreply());
    }
    if (from.has_savehistory()) {
      set_savehistory(from.savehistory());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lockquickbar()) {
      set_lockquickbar(from.lockquickbar());
    }
    if (from.has_quickbartype()) {
      set_quickbartype(from.quickbartype());
    }
    if (from.has_rightquickbartype()) {
      set_rightquickbartype(from.rightquickbartype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayoutSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayoutSetting::CopyFrom(const LayoutSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutSetting::IsInitialized() const {

  return true;
}

void LayoutSetting::Swap(LayoutSetting* other) {
  if (other != this) {
    std::swap(chatupperratiox_, other->chatupperratiox_);
    std::swap(chatupperratioy_, other->chatupperratioy_);
    std::swap(chatlowerratiox_, other->chatlowerratiox_);
    std::swap(chatlowerratioy_, other->chatlowerratioy_);
    marks_.Swap(&other->marks_);
    std::swap(onlinenotify_, other->onlinenotify_);
    std::swap(friendautoreply_, other->friendautoreply_);
    std::swap(savehistory_, other->savehistory_);
    std::swap(lockquickbar_, other->lockquickbar_);
    std::swap(quickbartype_, other->quickbartype_);
    std::swap(rightquickbartype_, other->rightquickbartype_);
    questtraceblockedids_.Swap(&other->questtraceblockedids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayoutSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayoutSetting_descriptor_;
  metadata.reflection = LayoutSetting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamecfg

// @@protoc_insertion_point(global_scope)
