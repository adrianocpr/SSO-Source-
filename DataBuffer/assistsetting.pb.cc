// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assistsetting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "assistsetting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamecfg {

namespace {

const ::google::protobuf::Descriptor* AssistSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistSetting_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_assistsetting_2eproto() {
  protobuf_AddDesc_assistsetting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "assistsetting.proto");
  GOOGLE_CHECK(file != NULL);
  AssistSetting_descriptor_ = file->message_type(0);
  static const int AssistSetting_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistSetting, autoselmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistSetting, automedicine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistSetting, medicinehprateindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistSetting, medicineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistSetting, isanchored_),
  };
  AssistSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistSetting_descriptor_,
      AssistSetting::default_instance_,
      AssistSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistSetting));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_assistsetting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistSetting_descriptor_, &AssistSetting::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_assistsetting_2eproto() {
  delete AssistSetting::default_instance_;
  delete AssistSetting_reflection_;
}

void protobuf_AddDesc_assistsetting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023assistsetting.proto\022\007gamecfg\"\235\001\n\rAssis"
    "tSetting\022\035\n\016autoSelMonster\030\001 \001(\010:\005false\022"
    "\033\n\014autoMedicine\030\002 \001(\010:\005false\022\036\n\023medicine"
    "HpRateIndex\030\003 \001(\005:\0010\022\025\n\nmedicineId\030\004 \001(\005"
    ":\0010\022\031\n\nisAnchored\030\005 \001(\010:\005false", 190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "assistsetting.proto", &protobuf_RegisterTypes);
  AssistSetting::default_instance_ = new AssistSetting();
  AssistSetting::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_assistsetting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_assistsetting_2eproto {
  StaticDescriptorInitializer_assistsetting_2eproto() {
    protobuf_AddDesc_assistsetting_2eproto();
  }
} static_descriptor_initializer_assistsetting_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AssistSetting::kAutoSelMonsterFieldNumber;
const int AssistSetting::kAutoMedicineFieldNumber;
const int AssistSetting::kMedicineHpRateIndexFieldNumber;
const int AssistSetting::kMedicineIdFieldNumber;
const int AssistSetting::kIsAnchoredFieldNumber;
#endif  // !_MSC_VER

AssistSetting::AssistSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistSetting::InitAsDefaultInstance() {
}

AssistSetting::AssistSetting(const AssistSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistSetting::SharedCtor() {
  _cached_size_ = 0;
  autoselmonster_ = false;
  automedicine_ = false;
  medicinehprateindex_ = 0;
  medicineid_ = 0;
  isanchored_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistSetting::~AssistSetting() {
  SharedDtor();
}

void AssistSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistSetting_descriptor_;
}

const AssistSetting& AssistSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_assistsetting_2eproto();
  return *default_instance_;
}

AssistSetting* AssistSetting::default_instance_ = NULL;

AssistSetting* AssistSetting::New() const {
  return new AssistSetting;
}

void AssistSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autoselmonster_ = false;
    automedicine_ = false;
    medicinehprateindex_ = 0;
    medicineid_ = 0;
    isanchored_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool autoSelMonster = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoselmonster_)));
          set_has_autoselmonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_autoMedicine;
        break;
      }

      // optional bool autoMedicine = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoMedicine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automedicine_)));
          set_has_automedicine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_medicineHpRateIndex;
        break;
      }

      // optional int32 medicineHpRateIndex = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medicineHpRateIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medicinehprateindex_)));
          set_has_medicinehprateindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_medicineId;
        break;
      }

      // optional int32 medicineId = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medicineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medicineid_)));
          set_has_medicineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isAnchored;
        break;
      }

      // optional bool isAnchored = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isanchored_)));
          set_has_isanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool autoSelMonster = 1 [default = false];
  if (has_autoselmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->autoselmonster(), output);
  }

  // optional bool autoMedicine = 2 [default = false];
  if (has_automedicine()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->automedicine(), output);
  }

  // optional int32 medicineHpRateIndex = 3 [default = 0];
  if (has_medicinehprateindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->medicinehprateindex(), output);
  }

  // optional int32 medicineId = 4 [default = 0];
  if (has_medicineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->medicineid(), output);
  }

  // optional bool isAnchored = 5 [default = false];
  if (has_isanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isanchored(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool autoSelMonster = 1 [default = false];
  if (has_autoselmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->autoselmonster(), target);
  }

  // optional bool autoMedicine = 2 [default = false];
  if (has_automedicine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->automedicine(), target);
  }

  // optional int32 medicineHpRateIndex = 3 [default = 0];
  if (has_medicinehprateindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->medicinehprateindex(), target);
  }

  // optional int32 medicineId = 4 [default = 0];
  if (has_medicineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->medicineid(), target);
  }

  // optional bool isAnchored = 5 [default = false];
  if (has_isanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isanchored(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool autoSelMonster = 1 [default = false];
    if (has_autoselmonster()) {
      total_size += 1 + 1;
    }

    // optional bool autoMedicine = 2 [default = false];
    if (has_automedicine()) {
      total_size += 1 + 1;
    }

    // optional int32 medicineHpRateIndex = 3 [default = 0];
    if (has_medicinehprateindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medicinehprateindex());
    }

    // optional int32 medicineId = 4 [default = 0];
    if (has_medicineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medicineid());
    }

    // optional bool isAnchored = 5 [default = false];
    if (has_isanchored()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistSetting::MergeFrom(const AssistSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autoselmonster()) {
      set_autoselmonster(from.autoselmonster());
    }
    if (from.has_automedicine()) {
      set_automedicine(from.automedicine());
    }
    if (from.has_medicinehprateindex()) {
      set_medicinehprateindex(from.medicinehprateindex());
    }
    if (from.has_medicineid()) {
      set_medicineid(from.medicineid());
    }
    if (from.has_isanchored()) {
      set_isanchored(from.isanchored());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistSetting::CopyFrom(const AssistSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistSetting::IsInitialized() const {

  return true;
}

void AssistSetting::Swap(AssistSetting* other) {
  if (other != this) {
    std::swap(autoselmonster_, other->autoselmonster_);
    std::swap(automedicine_, other->automedicine_);
    std::swap(medicinehprateindex_, other->medicinehprateindex_);
    std::swap(medicineid_, other->medicineid_);
    std::swap(isanchored_, other->isanchored_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistSetting_descriptor_;
  metadata.reflection = AssistSetting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamecfg

// @@protoc_insertion_point(global_scope)
