// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamesetting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gamesetting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamecfg {

namespace {

const ::google::protobuf::Descriptor* GameSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSetting_ChatChannelSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSetting_ChatChannelSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSetting_PkRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSetting_PkRule_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gamesetting_2eproto() {
  protobuf_AddDesc_gamesetting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gamesetting.proto");
  GOOGLE_CHECK(file != NULL);
  GameSetting_descriptor_ = file->message_type(0);
  static const int GameSetting_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, chatsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, fontsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, autoreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, autoreplytxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, pkrules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, curpkrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, turnaround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, reversewheel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, chatbubble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, extrainputmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, chatautousebindmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, chatautoworlditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, bagitemfilterindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, activitiessend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, activitiesreceive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, usersettingchanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, currpetindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, contestlevelicon_),
  };
  GameSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSetting_descriptor_,
      GameSetting::default_instance_,
      GameSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSetting));
  GameSetting_ChatChannelSetting_descriptor_ = GameSetting_descriptor_->nested_type(0);
  static const int GameSetting_ChatChannelSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting_ChatChannelSetting, chatchannelshowmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting_ChatChannelSetting, name_),
  };
  GameSetting_ChatChannelSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSetting_ChatChannelSetting_descriptor_,
      GameSetting_ChatChannelSetting::default_instance_,
      GameSetting_ChatChannelSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting_ChatChannelSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting_ChatChannelSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSetting_ChatChannelSetting));
  GameSetting_PkRule_descriptor_ = GameSetting_descriptor_->nested_type(1);
  static const int GameSetting_PkRule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting_PkRule, pvpmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting_PkRule, tabselrule_),
  };
  GameSetting_PkRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSetting_PkRule_descriptor_,
      GameSetting_PkRule::default_instance_,
      GameSetting_PkRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting_PkRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSetting_PkRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSetting_PkRule));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gamesetting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSetting_descriptor_, &GameSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSetting_ChatChannelSetting_descriptor_, &GameSetting_ChatChannelSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSetting_PkRule_descriptor_, &GameSetting_PkRule::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gamesetting_2eproto() {
  delete GameSetting::default_instance_;
  delete GameSetting_reflection_;
  delete GameSetting_ChatChannelSetting::default_instance_;
  delete GameSetting_ChatChannelSetting_reflection_;
  delete GameSetting_PkRule::default_instance_;
  delete GameSetting_PkRule_reflection_;
}

void protobuf_AddDesc_gamesetting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021gamesetting.proto\022\007gamecfg\"\255\005\n\013GameSet"
    "ting\022<\n\013chatSetting\030\001 \003(\0132\'.gamecfg.Game"
    "Setting.ChatChannelSetting\022\023\n\010fontSize\030\002"
    " \001(\r:\0011\022\030\n\tautoReply\030\003 \001(\010:\005false\022\024\n\014aut"
    "oReplyTxt\030\004 \001(\t\022,\n\007pkRules\030\005 \003(\0132\033.gamec"
    "fg.GameSetting.PkRule\022\024\n\tcurPkRule\030\006 \001(\005"
    ":\0010\022\031\n\nturnAround\030\007 \001(\010:\005false\022\033\n\014revers"
    "eWheel\030\010 \001(\010:\005false\022\030\n\nchatBubble\030\t \001(\010:"
    "\004true\022\031\n\016extraInputMode\030\n \001(\r:\0010\022\"\n\024chat"
    "AutoUseBindMoney\030\013 \001(\010:\004true\022 \n\021chatAuto"
    "WorldItem\030\014 \001(\010:\005false\022\035\n\022bagItemFilterI"
    "ndex\030\r \001(\005:\0010\022\032\n\016activitiesSend\030\016 \003(\005B\002\020"
    "\001\022\035\n\021activitiesReceive\030\017 \003(\005B\002\020\001\022\035\n\022user"
    "SettingChanged\030\020 \001(\r:\0010\022\027\n\014currPetIndex\030"
    "\021 \001(\r:\0010\022\037\n\020contestLevelIcon\030\022 \001(\010:\005fals"
    "e\032B\n\022ChatChannelSetting\022\036\n\023chatChannelSh"
    "owMask\030\001 \001(\004:\0010\022\014\n\004name\030\002 \001(\t\032-\n\006PkRule\022"
    "\017\n\007pvpMask\030\001 \001(\r\022\022\n\ntabSelRule\030\002 \001(\r", 716);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gamesetting.proto", &protobuf_RegisterTypes);
  GameSetting::default_instance_ = new GameSetting();
  GameSetting_ChatChannelSetting::default_instance_ = new GameSetting_ChatChannelSetting();
  GameSetting_PkRule::default_instance_ = new GameSetting_PkRule();
  GameSetting::default_instance_->InitAsDefaultInstance();
  GameSetting_ChatChannelSetting::default_instance_->InitAsDefaultInstance();
  GameSetting_PkRule::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gamesetting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gamesetting_2eproto {
  StaticDescriptorInitializer_gamesetting_2eproto() {
    protobuf_AddDesc_gamesetting_2eproto();
  }
} static_descriptor_initializer_gamesetting_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GameSetting_ChatChannelSetting::kChatChannelShowMaskFieldNumber;
const int GameSetting_ChatChannelSetting::kNameFieldNumber;
#endif  // !_MSC_VER

GameSetting_ChatChannelSetting::GameSetting_ChatChannelSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameSetting_ChatChannelSetting::InitAsDefaultInstance() {
}

GameSetting_ChatChannelSetting::GameSetting_ChatChannelSetting(const GameSetting_ChatChannelSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameSetting_ChatChannelSetting::SharedCtor() {
  _cached_size_ = 0;
  chatchannelshowmask_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSetting_ChatChannelSetting::~GameSetting_ChatChannelSetting() {
  SharedDtor();
}

void GameSetting_ChatChannelSetting::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GameSetting_ChatChannelSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSetting_ChatChannelSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSetting_ChatChannelSetting_descriptor_;
}

const GameSetting_ChatChannelSetting& GameSetting_ChatChannelSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamesetting_2eproto();
  return *default_instance_;
}

GameSetting_ChatChannelSetting* GameSetting_ChatChannelSetting::default_instance_ = NULL;

GameSetting_ChatChannelSetting* GameSetting_ChatChannelSetting::New() const {
  return new GameSetting_ChatChannelSetting;
}

void GameSetting_ChatChannelSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatchannelshowmask_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSetting_ChatChannelSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chatChannelShowMask = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chatchannelshowmask_)));
          set_has_chatchannelshowmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameSetting_ChatChannelSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 chatChannelShowMask = 1 [default = 0];
  if (has_chatchannelshowmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chatchannelshowmask(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameSetting_ChatChannelSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 chatChannelShowMask = 1 [default = 0];
  if (has_chatchannelshowmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chatchannelshowmask(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameSetting_ChatChannelSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 chatChannelShowMask = 1 [default = 0];
    if (has_chatchannelshowmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chatchannelshowmask());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSetting_ChatChannelSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSetting_ChatChannelSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSetting_ChatChannelSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSetting_ChatChannelSetting::MergeFrom(const GameSetting_ChatChannelSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatchannelshowmask()) {
      set_chatchannelshowmask(from.chatchannelshowmask());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSetting_ChatChannelSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSetting_ChatChannelSetting::CopyFrom(const GameSetting_ChatChannelSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSetting_ChatChannelSetting::IsInitialized() const {

  return true;
}

void GameSetting_ChatChannelSetting::Swap(GameSetting_ChatChannelSetting* other) {
  if (other != this) {
    std::swap(chatchannelshowmask_, other->chatchannelshowmask_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSetting_ChatChannelSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSetting_ChatChannelSetting_descriptor_;
  metadata.reflection = GameSetting_ChatChannelSetting_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameSetting_PkRule::kPvpMaskFieldNumber;
const int GameSetting_PkRule::kTabSelRuleFieldNumber;
#endif  // !_MSC_VER

GameSetting_PkRule::GameSetting_PkRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameSetting_PkRule::InitAsDefaultInstance() {
}

GameSetting_PkRule::GameSetting_PkRule(const GameSetting_PkRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameSetting_PkRule::SharedCtor() {
  _cached_size_ = 0;
  pvpmask_ = 0u;
  tabselrule_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSetting_PkRule::~GameSetting_PkRule() {
  SharedDtor();
}

void GameSetting_PkRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameSetting_PkRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSetting_PkRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSetting_PkRule_descriptor_;
}

const GameSetting_PkRule& GameSetting_PkRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamesetting_2eproto();
  return *default_instance_;
}

GameSetting_PkRule* GameSetting_PkRule::default_instance_ = NULL;

GameSetting_PkRule* GameSetting_PkRule::New() const {
  return new GameSetting_PkRule;
}

void GameSetting_PkRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pvpmask_ = 0u;
    tabselrule_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSetting_PkRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pvpMask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pvpmask_)));
          set_has_pvpmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabSelRule;
        break;
      }

      // optional uint32 tabSelRule = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabSelRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tabselrule_)));
          set_has_tabselrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameSetting_PkRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pvpMask = 1;
  if (has_pvpmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pvpmask(), output);
  }

  // optional uint32 tabSelRule = 2;
  if (has_tabselrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tabselrule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameSetting_PkRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pvpMask = 1;
  if (has_pvpmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pvpmask(), target);
  }

  // optional uint32 tabSelRule = 2;
  if (has_tabselrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tabselrule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameSetting_PkRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pvpMask = 1;
    if (has_pvpmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pvpmask());
    }

    // optional uint32 tabSelRule = 2;
    if (has_tabselrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tabselrule());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSetting_PkRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSetting_PkRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSetting_PkRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSetting_PkRule::MergeFrom(const GameSetting_PkRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvpmask()) {
      set_pvpmask(from.pvpmask());
    }
    if (from.has_tabselrule()) {
      set_tabselrule(from.tabselrule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSetting_PkRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSetting_PkRule::CopyFrom(const GameSetting_PkRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSetting_PkRule::IsInitialized() const {

  return true;
}

void GameSetting_PkRule::Swap(GameSetting_PkRule* other) {
  if (other != this) {
    std::swap(pvpmask_, other->pvpmask_);
    std::swap(tabselrule_, other->tabselrule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSetting_PkRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSetting_PkRule_descriptor_;
  metadata.reflection = GameSetting_PkRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameSetting::kChatSettingFieldNumber;
const int GameSetting::kFontSizeFieldNumber;
const int GameSetting::kAutoReplyFieldNumber;
const int GameSetting::kAutoReplyTxtFieldNumber;
const int GameSetting::kPkRulesFieldNumber;
const int GameSetting::kCurPkRuleFieldNumber;
const int GameSetting::kTurnAroundFieldNumber;
const int GameSetting::kReverseWheelFieldNumber;
const int GameSetting::kChatBubbleFieldNumber;
const int GameSetting::kExtraInputModeFieldNumber;
const int GameSetting::kChatAutoUseBindMoneyFieldNumber;
const int GameSetting::kChatAutoWorldItemFieldNumber;
const int GameSetting::kBagItemFilterIndexFieldNumber;
const int GameSetting::kActivitiesSendFieldNumber;
const int GameSetting::kActivitiesReceiveFieldNumber;
const int GameSetting::kUserSettingChangedFieldNumber;
const int GameSetting::kCurrPetIndexFieldNumber;
const int GameSetting::kContestLevelIconFieldNumber;
#endif  // !_MSC_VER

GameSetting::GameSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameSetting::InitAsDefaultInstance() {
}

GameSetting::GameSetting(const GameSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameSetting::SharedCtor() {
  _cached_size_ = 0;
  fontsize_ = 1u;
  autoreply_ = false;
  autoreplytxt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curpkrule_ = 0;
  turnaround_ = false;
  reversewheel_ = false;
  chatbubble_ = true;
  extrainputmode_ = 0u;
  chatautousebindmoney_ = true;
  chatautoworlditem_ = false;
  bagitemfilterindex_ = 0;
  usersettingchanged_ = 0u;
  currpetindex_ = 0u;
  contestlevelicon_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSetting::~GameSetting() {
  SharedDtor();
}

void GameSetting::SharedDtor() {
  if (autoreplytxt_ != &::google::protobuf::internal::kEmptyString) {
    delete autoreplytxt_;
  }
  if (this != default_instance_) {
  }
}

void GameSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSetting_descriptor_;
}

const GameSetting& GameSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamesetting_2eproto();
  return *default_instance_;
}

GameSetting* GameSetting::default_instance_ = NULL;

GameSetting* GameSetting::New() const {
  return new GameSetting;
}

void GameSetting::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    fontsize_ = 1u;
    autoreply_ = false;
    if (has_autoreplytxt()) {
      if (autoreplytxt_ != &::google::protobuf::internal::kEmptyString) {
        autoreplytxt_->clear();
      }
    }
    curpkrule_ = 0;
    turnaround_ = false;
    reversewheel_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chatbubble_ = true;
    extrainputmode_ = 0u;
    chatautousebindmoney_ = true;
    chatautoworlditem_ = false;
    bagitemfilterindex_ = 0;
    usersettingchanged_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    currpetindex_ = 0u;
    contestlevelicon_ = false;
  }
  chatsetting_.Clear();
  pkrules_.Clear();
  activitiessend_.Clear();
  activitiesreceive_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gamecfg.GameSetting.ChatChannelSetting chatSetting = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatsetting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chatSetting;
        if (input->ExpectTag(16)) goto parse_fontSize;
        break;
      }

      // optional uint32 fontSize = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_autoReply;
        break;
      }

      // optional bool autoReply = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoReply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoreply_)));
          set_has_autoreply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_autoReplyTxt;
        break;
      }

      // optional string autoReplyTxt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_autoReplyTxt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autoreplytxt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->autoreplytxt().data(), this->autoreplytxt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pkRules;
        break;
      }

      // repeated .gamecfg.GameSetting.PkRule pkRules = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pkRules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pkrules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pkRules;
        if (input->ExpectTag(48)) goto parse_curPkRule;
        break;
      }

      // optional int32 curPkRule = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curPkRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curpkrule_)));
          set_has_curpkrule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_turnAround;
        break;
      }

      // optional bool turnAround = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnAround:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turnaround_)));
          set_has_turnaround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_reverseWheel;
        break;
      }

      // optional bool reverseWheel = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reverseWheel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reversewheel_)));
          set_has_reversewheel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_chatBubble;
        break;
      }

      // optional bool chatBubble = 9 [default = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatBubble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chatbubble_)));
          set_has_chatbubble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_extraInputMode;
        break;
      }

      // optional uint32 extraInputMode = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraInputMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extrainputmode_)));
          set_has_extrainputmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_chatAutoUseBindMoney;
        break;
      }

      // optional bool chatAutoUseBindMoney = 11 [default = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatAutoUseBindMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chatautousebindmoney_)));
          set_has_chatautousebindmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_chatAutoWorldItem;
        break;
      }

      // optional bool chatAutoWorldItem = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatAutoWorldItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chatautoworlditem_)));
          set_has_chatautoworlditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bagItemFilterIndex;
        break;
      }

      // optional int32 bagItemFilterIndex = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bagItemFilterIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagitemfilterindex_)));
          set_has_bagitemfilterindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_activitiesSend;
        break;
      }

      // repeated int32 activitiesSend = 14 [packed = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitiesSend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_activitiessend())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 114, input, this->mutable_activitiessend())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_activitiesReceive;
        break;
      }

      // repeated int32 activitiesReceive = 15 [packed = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitiesReceive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_activitiesreceive())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 122, input, this->mutable_activitiesreceive())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_userSettingChanged;
        break;
      }

      // optional uint32 userSettingChanged = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userSettingChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usersettingchanged_)));
          set_has_usersettingchanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_currPetIndex;
        break;
      }

      // optional uint32 currPetIndex = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currPetIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currpetindex_)));
          set_has_currpetindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_contestLevelIcon;
        break;
      }

      // optional bool contestLevelIcon = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contestLevelIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contestlevelicon_)));
          set_has_contestlevelicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gamecfg.GameSetting.ChatChannelSetting chatSetting = 1;
  for (int i = 0; i < this->chatsetting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatsetting(i), output);
  }

  // optional uint32 fontSize = 2 [default = 1];
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fontsize(), output);
  }

  // optional bool autoReply = 3 [default = false];
  if (has_autoreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autoreply(), output);
  }

  // optional string autoReplyTxt = 4;
  if (has_autoreplytxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->autoreplytxt().data(), this->autoreplytxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->autoreplytxt(), output);
  }

  // repeated .gamecfg.GameSetting.PkRule pkRules = 5;
  for (int i = 0; i < this->pkrules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pkrules(i), output);
  }

  // optional int32 curPkRule = 6 [default = 0];
  if (has_curpkrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curpkrule(), output);
  }

  // optional bool turnAround = 7 [default = false];
  if (has_turnaround()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->turnaround(), output);
  }

  // optional bool reverseWheel = 8 [default = false];
  if (has_reversewheel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reversewheel(), output);
  }

  // optional bool chatBubble = 9 [default = true];
  if (has_chatbubble()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->chatbubble(), output);
  }

  // optional uint32 extraInputMode = 10 [default = 0];
  if (has_extrainputmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->extrainputmode(), output);
  }

  // optional bool chatAutoUseBindMoney = 11 [default = true];
  if (has_chatautousebindmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->chatautousebindmoney(), output);
  }

  // optional bool chatAutoWorldItem = 12 [default = false];
  if (has_chatautoworlditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->chatautoworlditem(), output);
  }

  // optional int32 bagItemFilterIndex = 13 [default = 0];
  if (has_bagitemfilterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bagitemfilterindex(), output);
  }

  // repeated int32 activitiesSend = 14 [packed = true];
  if (this->activitiessend_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_activitiessend_cached_byte_size_);
  }
  for (int i = 0; i < this->activitiessend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->activitiessend(i), output);
  }

  // repeated int32 activitiesReceive = 15 [packed = true];
  if (this->activitiesreceive_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_activitiesreceive_cached_byte_size_);
  }
  for (int i = 0; i < this->activitiesreceive_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->activitiesreceive(i), output);
  }

  // optional uint32 userSettingChanged = 16 [default = 0];
  if (has_usersettingchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->usersettingchanged(), output);
  }

  // optional uint32 currPetIndex = 17 [default = 0];
  if (has_currpetindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->currpetindex(), output);
  }

  // optional bool contestLevelIcon = 18 [default = false];
  if (has_contestlevelicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->contestlevelicon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gamecfg.GameSetting.ChatChannelSetting chatSetting = 1;
  for (int i = 0; i < this->chatsetting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatsetting(i), target);
  }

  // optional uint32 fontSize = 2 [default = 1];
  if (has_fontsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fontsize(), target);
  }

  // optional bool autoReply = 3 [default = false];
  if (has_autoreply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->autoreply(), target);
  }

  // optional string autoReplyTxt = 4;
  if (has_autoreplytxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->autoreplytxt().data(), this->autoreplytxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->autoreplytxt(), target);
  }

  // repeated .gamecfg.GameSetting.PkRule pkRules = 5;
  for (int i = 0; i < this->pkrules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pkrules(i), target);
  }

  // optional int32 curPkRule = 6 [default = 0];
  if (has_curpkrule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curpkrule(), target);
  }

  // optional bool turnAround = 7 [default = false];
  if (has_turnaround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->turnaround(), target);
  }

  // optional bool reverseWheel = 8 [default = false];
  if (has_reversewheel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->reversewheel(), target);
  }

  // optional bool chatBubble = 9 [default = true];
  if (has_chatbubble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->chatbubble(), target);
  }

  // optional uint32 extraInputMode = 10 [default = 0];
  if (has_extrainputmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->extrainputmode(), target);
  }

  // optional bool chatAutoUseBindMoney = 11 [default = true];
  if (has_chatautousebindmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->chatautousebindmoney(), target);
  }

  // optional bool chatAutoWorldItem = 12 [default = false];
  if (has_chatautoworlditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->chatautoworlditem(), target);
  }

  // optional int32 bagItemFilterIndex = 13 [default = 0];
  if (has_bagitemfilterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bagitemfilterindex(), target);
  }

  // repeated int32 activitiesSend = 14 [packed = true];
  if (this->activitiessend_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _activitiessend_cached_byte_size_, target);
  }
  for (int i = 0; i < this->activitiessend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->activitiessend(i), target);
  }

  // repeated int32 activitiesReceive = 15 [packed = true];
  if (this->activitiesreceive_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _activitiesreceive_cached_byte_size_, target);
  }
  for (int i = 0; i < this->activitiesreceive_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->activitiesreceive(i), target);
  }

  // optional uint32 userSettingChanged = 16 [default = 0];
  if (has_usersettingchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->usersettingchanged(), target);
  }

  // optional uint32 currPetIndex = 17 [default = 0];
  if (has_currpetindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->currpetindex(), target);
  }

  // optional bool contestLevelIcon = 18 [default = false];
  if (has_contestlevelicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->contestlevelicon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 fontSize = 2 [default = 1];
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fontsize());
    }

    // optional bool autoReply = 3 [default = false];
    if (has_autoreply()) {
      total_size += 1 + 1;
    }

    // optional string autoReplyTxt = 4;
    if (has_autoreplytxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->autoreplytxt());
    }

    // optional int32 curPkRule = 6 [default = 0];
    if (has_curpkrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curpkrule());
    }

    // optional bool turnAround = 7 [default = false];
    if (has_turnaround()) {
      total_size += 1 + 1;
    }

    // optional bool reverseWheel = 8 [default = false];
    if (has_reversewheel()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool chatBubble = 9 [default = true];
    if (has_chatbubble()) {
      total_size += 1 + 1;
    }

    // optional uint32 extraInputMode = 10 [default = 0];
    if (has_extrainputmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extrainputmode());
    }

    // optional bool chatAutoUseBindMoney = 11 [default = true];
    if (has_chatautousebindmoney()) {
      total_size += 1 + 1;
    }

    // optional bool chatAutoWorldItem = 12 [default = false];
    if (has_chatautoworlditem()) {
      total_size += 1 + 1;
    }

    // optional int32 bagItemFilterIndex = 13 [default = 0];
    if (has_bagitemfilterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagitemfilterindex());
    }

    // optional uint32 userSettingChanged = 16 [default = 0];
    if (has_usersettingchanged()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usersettingchanged());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 currPetIndex = 17 [default = 0];
    if (has_currpetindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currpetindex());
    }

    // optional bool contestLevelIcon = 18 [default = false];
    if (has_contestlevelicon()) {
      total_size += 2 + 1;
    }

  }
  // repeated .gamecfg.GameSetting.ChatChannelSetting chatSetting = 1;
  total_size += 1 * this->chatsetting_size();
  for (int i = 0; i < this->chatsetting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatsetting(i));
  }

  // repeated .gamecfg.GameSetting.PkRule pkRules = 5;
  total_size += 1 * this->pkrules_size();
  for (int i = 0; i < this->pkrules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pkrules(i));
  }

  // repeated int32 activitiesSend = 14 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->activitiessend_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->activitiessend(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _activitiessend_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 activitiesReceive = 15 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->activitiesreceive_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->activitiesreceive(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _activitiesreceive_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSetting::MergeFrom(const GameSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatsetting_.MergeFrom(from.chatsetting_);
  pkrules_.MergeFrom(from.pkrules_);
  activitiessend_.MergeFrom(from.activitiessend_);
  activitiesreceive_.MergeFrom(from.activitiesreceive_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_autoreply()) {
      set_autoreply(from.autoreply());
    }
    if (from.has_autoreplytxt()) {
      set_autoreplytxt(from.autoreplytxt());
    }
    if (from.has_curpkrule()) {
      set_curpkrule(from.curpkrule());
    }
    if (from.has_turnaround()) {
      set_turnaround(from.turnaround());
    }
    if (from.has_reversewheel()) {
      set_reversewheel(from.reversewheel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chatbubble()) {
      set_chatbubble(from.chatbubble());
    }
    if (from.has_extrainputmode()) {
      set_extrainputmode(from.extrainputmode());
    }
    if (from.has_chatautousebindmoney()) {
      set_chatautousebindmoney(from.chatautousebindmoney());
    }
    if (from.has_chatautoworlditem()) {
      set_chatautoworlditem(from.chatautoworlditem());
    }
    if (from.has_bagitemfilterindex()) {
      set_bagitemfilterindex(from.bagitemfilterindex());
    }
    if (from.has_usersettingchanged()) {
      set_usersettingchanged(from.usersettingchanged());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_currpetindex()) {
      set_currpetindex(from.currpetindex());
    }
    if (from.has_contestlevelicon()) {
      set_contestlevelicon(from.contestlevelicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSetting::CopyFrom(const GameSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSetting::IsInitialized() const {

  return true;
}

void GameSetting::Swap(GameSetting* other) {
  if (other != this) {
    chatsetting_.Swap(&other->chatsetting_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(autoreply_, other->autoreply_);
    std::swap(autoreplytxt_, other->autoreplytxt_);
    pkrules_.Swap(&other->pkrules_);
    std::swap(curpkrule_, other->curpkrule_);
    std::swap(turnaround_, other->turnaround_);
    std::swap(reversewheel_, other->reversewheel_);
    std::swap(chatbubble_, other->chatbubble_);
    std::swap(extrainputmode_, other->extrainputmode_);
    std::swap(chatautousebindmoney_, other->chatautousebindmoney_);
    std::swap(chatautoworlditem_, other->chatautoworlditem_);
    std::swap(bagitemfilterindex_, other->bagitemfilterindex_);
    activitiessend_.Swap(&other->activitiessend_);
    activitiesreceive_.Swap(&other->activitiesreceive_);
    std::swap(usersettingchanged_, other->usersettingchanged_);
    std::swap(currpetindex_, other->currpetindex_);
    std::swap(contestlevelicon_, other->contestlevelicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSetting_descriptor_;
  metadata.reflection = GameSetting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamecfg

// @@protoc_insertion_point(global_scope)
